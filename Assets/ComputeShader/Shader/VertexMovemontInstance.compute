#pragma kernel CSPositionKernel
#pragma kernel InitLerp
#define thread_group_size_x 64
#define thread_group_size_y 1
#define P 3.141592653
#define Epsilon    0.0001


#include "UnityCG.cginc"
#include "../GPUParticle.cginc"
#include "../GPUParticleComputeCommon.cginc"
#include "../../Common/Shaders/Math.cginc"
#include "../../Common/Shaders/Random.cginc"



//着力半径
float ForceRadius;


float dt;
float4 MoveRange;
float3 TargetPosRight;
float3 TargetWorldPos;

int ScreenWidth;
int ScreenHeight;
int StateCode = 0;

float4 bonePos[25];

//视矩阵，也就是世界到摄像机的矩阵，由C#传递过来
float4x4 v;
//投影矩阵，也就是摄像机到屏幕的矩阵，由C#传递过来
float4x4 p;
//视矩阵的逆矩阵，也就是摄像机到世界的矩阵，由C#传递过来
float4x4 iv;
//投影矩阵的逆矩阵，也就是屏幕到摄像机的的矩阵，由C#传递过来
float4x4 ip;


//把世界坐标点转换到屏幕坐标，支持相机旋转,得到的数据范围是[0-1]
//ComputeScreenPos虽然为unityCG.cginc的方法，但是不涉及到矩阵，所以可以应用该方法
float2 WorldToScreenPos(float3 pos)
{
    float4x4 vp = mul(p, v);

    float4 vertex = mul(vp, float4(pos, 1.0));

    float4 screenPos = ComputeScreenPos(vertex);

    screenPos.xy = screenPos.xy / screenPos.w;

    return float2(screenPos.x, screenPos.y);
}

float rand(in float2 uv)
{
    float2 noise = (frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}

float random(float2 st, float n)
{
    st = floor(st * n);
    return frac(sin(dot(st.xy, float2(12.9898, 78.233))) * 43758.5453123);
}

//根据位置获取随机速度
float2 GetVelocity(float3 pos, float n = 100)
{
    float2 newScreenPos = WorldToScreenPos(pos);

    float v1 = random(float2(newScreenPos.y, newScreenPos.x), n);

    float v2 = random(newScreenPos, n);

    //转换到[-1,1]区间，上面的V1,V2数值范围为[0,1],我们通过-0.5  *2 来转换
    v1 = (v1 - 0.5) * 2;
    v2 = (v2 - 0.5) * 2;

    return float2(v1, v2);

}

//前向运动
void MoveFront(uint3 id : SV_DispatchThreadID)
{
    float4 pos = positionBuffer[id.x].position;

    float4 originalPos = positionBuffer[id.x].originalPos;
    
    float4 timeTemp = positionBuffer[id.x].uvOffset;
    
    float3 moveTarget = positionBuffer[id.x].moveTarget;
    
    float4 uv2Offset = positionBuffer[id.x].uv2Offset;
    
    int stateCode = positionBuffer[id.x].stateCode;
    
    float3 initialVelocity = positionBuffer[id.x].initialVelocity;
    
     
    
    float3 target = originalPos.xyz + float3(0, 0, initialVelocity.x);
    
    originalPos.xyz = lerp(originalPos.xyz, target, dt);
   
    
    float2 screenPos = WorldToScreenPos(pos.xyz);
    
    screenPos.x = screenPos.x * ScreenWidth;
    screenPos.y = screenPos.y * ScreenHeight;
    
    float2 dir = screenPos - TargetPosRight.xy; //屏幕向量，不是3D向量
    
    float2 worldDir = normalize(dir) * 25;//转为屏幕向量尺寸
    
    
    
    if (stateCode != StateCode)//如果是从其他状态切换到该状态
    {
        stateCode = StateCode;
        timeTemp.y = 0;
        uv2Offset.w = 1;//旋转开关=>开

    }
    
    if (timeTemp.y <= timeTemp.x)
    {
        timeTemp.y += dt;
    }
    else
    {
        
        timeTemp.y = 0;
        uv2Offset.x = 1; //回归值
    }
    
    
    if (length(dir) < ForceRadius)
    {
        if (uv2Offset.x > 0)
        {
            moveTarget = pos.xyz + float3(worldDir.x, worldDir.y, 0);
        
            timeTemp.y = 0;
        
            uv2Offset.x = -1; //标记触发了半径内
        
        }
         
        pos.xyz = lerp(pos.xyz, moveTarget, dt); //弹出运动
        
    }
    else
    {
        if (uv2Offset.x > 0)
        {
            pos.xyz = lerp(pos, originalPos, dt );//常规运动
            
        }
        else
        {
            pos.xyz = lerp(pos.xyz, moveTarget, dt);//弹出运动
            
        }
       
       
    }
   
    
    
    if(MoveRange.z<=pos.z)
    {
      //超过限定范围就归位
        float2 v = GetVelocity(pos.xyz);
        v = v / 2 + 0.5; //将范围约束在0,1
        //new Vector4(rangeVector2.x - RanomPos.x / 2, rangeVector2.y - RanomPos.y / 2 + heightTest, Zdepth + Random.Range(0, RanomPos.z), 3f);
        float newx = v.x * MoveRange.x;
        float newy = v.y * MoveRange.y;
        
        float4 temp = float4(newx - MoveRange.x / 2, newy - MoveRange.y/2, 0, pos.w);
        
        pos = temp;
        originalPos = temp;
        moveTarget = temp.xyz;
        uv2Offset.x = 1;

    }
    
    positionBuffer[id.x].position = pos;

    positionBuffer[id.x].originalPos = originalPos;
    
    positionBuffer[id.x].uvOffset = timeTemp;
    
    positionBuffer[id.x].moveTarget = moveTarget;
    
    positionBuffer[id.x].uv2Offset = uv2Offset;
    
    positionBuffer[id.x].stateCode = stateCode;
    
}
//聚集状态
void gatherState(uint3 id : SV_DispatchThreadID)
{
	
    int stateCode = positionBuffer[id.x].stateCode;
	
    float4 pos = positionBuffer[id.x].position;

    float4 originalPos = positionBuffer[id.x].originalPos;
	
    float3 moveDir = positionBuffer[id.x].moveDir;
	
    float4 timeTemp = positionBuffer[id.x].uvOffset;
    
    float4 uv2Offset = positionBuffer[id.x].uv2Offset;
	
    float v = 0; //插值
	
    if (stateCode != StateCode)//如果是从其他状态切换到该状态
    {
        float2 v = GetVelocity(originalPos);
        moveDir.x = v.x / 2 + 0.5;
        if (moveDir.x <= 0.1)
        {
            moveDir.x = 0.1;

        }
        stateCode = StateCode;
        timeTemp.y = 0;
        uv2Offset.w = 0; //旋转开关=>关

    }
	
	
	///////////间隔到一定时间才移动
    if (timeTemp.y <= timeTemp.w)
    {
        timeTemp.y += dt;
        v = 0;

    }
    else
    {
        v = moveDir.x;
    }
	/////////间隔到一定时间才移动
	
	
	
    pos = CubicEaseOut(pos, float4(TargetWorldPos, 12), dt * v * 10);
	
    positionBuffer[id.x].position = pos;
    positionBuffer[id.x].moveDir = moveDir;
	
    positionBuffer[id.x].stateCode = stateCode;
	
    positionBuffer[id.x].uvOffset = timeTemp;
    
    positionBuffer[id.x].uv2Offset = uv2Offset;
}
//散开状态
void diffuseState(uint3 id : SV_DispatchThreadID)
{
    int stateCode = positionBuffer[id.x].stateCode;
	
    float4 pos = positionBuffer[id.x].position;

    float4 originalPos = positionBuffer[id.x].originalPos;
	
    float3 moveDir = positionBuffer[id.x].moveDir;
	
    float4 timeTemp = positionBuffer[id.x].uvOffset;
    
    float4 uv2Offset =positionBuffer[id.x]. uv2Offset;
	
    float v = 0; //插值
	
    if (stateCode != StateCode)//如果是从其他状态切换到该状态
    {
        float2 v = GetVelocity(originalPos);
        moveDir.x = v.x / 2 + 0.5;
        if (moveDir.x <= 0.3)
        {
            moveDir.x = 0.3;

        }
        stateCode = StateCode;
        timeTemp.y = 0;
        uv2Offset.w = 1;//旋转开关=>开

    }
	
	
	///////////间隔到一定时间才移动
    if (timeTemp.y <= timeTemp.w)
    {
        timeTemp.y += dt;
        v = 0;

    }
    else
    {
        v = moveDir.x;
    }
	/////////间隔到一定时间才移动
	
    pos = CubicEaseIn(pos, originalPos, dt * v * 20);
	
    positionBuffer[id.x].position = pos;
    positionBuffer[id.x].moveDir = moveDir;
	
    positionBuffer[id.x].stateCode = stateCode;
	
    positionBuffer[id.x].uvOffset = timeTemp;
    
    positionBuffer[id.x].uv2Offset = uv2Offset;
}
//粒子图改变成骨架形状
void ChangeSkeleton(uint3 id : SV_DispatchThreadID)
{
    float4 pos = positionBuffer[id.x].position;

    float4 originalPos = positionBuffer[id.x].originalPos;

    float3 moveDir = positionBuffer[id.x].moveDir;
	
    float2 indexRC = positionBuffer[id.x].indexRC;
	
    float4 timeTemp = positionBuffer[id.x].uvOffset;
	
    float4 velocity = positionBuffer[id.x].velocity;
	
    int stateCode = positionBuffer[id.x].stateCode;
	
	
    float3 p1 = bonePos[indexRC.x]; //得到第一个骨骼点位置
    //p1 = ScreenToWorldMatrix(float3(p1.x, p1.y, 30.5));
	
    float3 p2 = bonePos[indexRC.y]; //得到第二个骨骼点位置
   // p2 = ScreenToWorldMatrix(float3(p2.x, p2.y, 30.5));
	
	
	
	
    float _timeScale = 0.1; //_timeScale 为时间缩放系数
    float _width = 4; //width为宽度系数
    float _speed = 20; //_speed为速度系数
	
	
	
    if (stateCode != StateCode)//如果是从其他状态切换到该状态
    {
        float2 v = GetVelocity(originalPos);
        moveDir.x = v.x / 2 + 0.5;
        if (moveDir.x <= 0.1)
        {
            moveDir.x = 0.1;

        }
        stateCode = StateCode;
        timeTemp.y = 0;
    }
	
    if (timeTemp.y <= timeTemp.x * _timeScale)
    {
        timeTemp.y += dt;
    }
    else
    {
       
        float2 velocityTemp = GetVelocity(pos.xyz);
        velocityTemp = normalize(velocityTemp) * timeTemp.z * _width * timeTemp.w; //timeTemp.w值为随机数，范围0-1
        timeTemp.y = 0;
        velocity.xyz = float3(velocityTemp.xy, timeTemp.w);//timTemp.w*10 为随机Z的值
    }
	
	
    float3 p3 = lerp(p1, p2, timeTemp.w);//取得p1-p2 段之间随机的一个值
	
    p3 = p3 + velocity.xyz;
	
    pos = lerp(pos, float4(p3, originalPos.w), dt * _speed * (0.1 + timeTemp.w)); //0.1+timeTemp.w为随机速度，加上0.1不至于速度太慢
	
    positionBuffer[id.x].position = pos;
    positionBuffer[id.x].moveDir = moveDir;
	
    positionBuffer[id.x].uvOffset = timeTemp;
    
    positionBuffer[id.x].stateCode = stateCode;
	
    positionBuffer[id.x].velocity = velocity;
	
	
}


[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSPositionKernel(uint3 id : SV_DispatchThreadID)
{
    int stateCode = positionBuffer[id.x].stateCode;
    
    if (StateCode == 0)//为程序启动的初始状态
    {
        MoveFront(id);
    }
    else if (StateCode == 1)//聚集状态  
    {
        gatherState(id);

    }
    else if (StateCode == 2)//散开状态
    {
        diffuseState(id);

    }
    else if (StateCode == 3)//跟随人性骨骼状态
    {
        ChangeSkeleton(id);

    }
   
    
}
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void InitLerp(uint3 id : SV_DispatchThreadID)
{
   
}